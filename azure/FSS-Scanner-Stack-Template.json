{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "FileStorageSecurityServicePrincipalID": {
            "type": "string",
            "metadata": {
                "description": "The ID of the Service Principal created for Trend Micro's App Registration."
            },
            "maxLength": 36
        },
        "CloudOneRegion": {
            "type": "string",
            "metadata": {
                "description": "The region of the Trend Micro Cloud One services.<br/>For more information, see supported <a href='https://cloudone.trendmicro.com/docs/identity-and-account-management/c1-regions/'>Cloud One regions</a>."
            },
            "defaultValue": "us-1"
        },
        "StackPackageLocation": {
            "type": "string",
            "defaultValue": "https://file-storage-security.s3.amazonaws.com",
            "metadata": {
                "description": "Warning: Do not modify the field. Modifications may cause your deployment to fail."
            }
        },
        "Version": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Warning: Do not modify the field. Modifications may cause your deployment to fail."
            }
        },
        "SharedAccessSignature": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Warning: Do not modify the field. Modifications may cause your deployment to fail."
            }
        },
        "LogAnalyticsWorkspaceResourceID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "This field requires the resource ID of the existing Log Analytics workspace that the deployed Application Insights resources is associated with. If you don't want to manage the Log Analytics workspace by yourself, please leave this field blank."
            }
        },
        "VNETResourceID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />This field requires the resource ID of the existing virtual network (VNet) that the deployed resource will be associated with. If you wish to deploy the resource into a VNet, please see <a href='https://cloudone.trendmicro.com/docs/file-storage-security/azure-vnet-deployment/'>Deploy in VNet</a> for detailed instructions and ensure that the required resources have been created.<br /> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETScannerSubnetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />The name of the subnet used by the Scanner Function App."
            }
        },
        "VNETPrivateEndpointsSubnetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />Provide the name of the subnet used to create private endpoints for other resources such as Service Bus and Storage Account."
            }
        },
        "VNETFilePrivateDNSZoneResourceID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />To connect to stack resources via private endpoints, use the Private DNS zone resource ID for the storage account file.<br/>For example:<br/><b>/subscriptions/1234abcd-3c6d-4347-9019-123456789012/resourceGroups/resource-group-name/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net</b><br/>Please confirm the Private DNS zone name is correct and refer to <a href='https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns'>Azure Private Endpoint DNS configuration</a>.<br/> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETBlobPrivateDNSZoneResourceID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />To connect to stack resources via private endpoints, use the Private DNS zone resource ID for the storage account blob.<br/>For example:<br/><b>/subscriptions/1234abcd-3c6d-4347-9019-123456789012/resourceGroups/resource-group-name/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net</b><br/>Please confirm the Private DNS zone name is correct and refer to <a href='https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns'>Azure Private Endpoint DNS configuration</a>.<br/> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETTablePrivateDNSZoneResourceID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />To connect to stack resources via private endpoints, use the Private DNS zone resource ID for the storage account table.<br/>For example:<br/><b>/subscriptions/1234abcd-3c6d-4347-9019-123456789012/resourceGroups/resource-group-name/providers/Microsoft.Network/privateDnsZones/privatelink.table.core.windows.net</b><br/>Please confirm the Private DNS zone name is correct and refer to <a href='https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns'>Azure Private Endpoint DNS configuration</a>.<br/> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETServiceBusPrivateDNSZoneResourceID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />To connect to stack resources via private endpoints, use the Private DNS zone resource ID for the service bus.<br/>For example:<br/><b>/subscriptions/1234abcd-3c6d-4347-9019-123456789012/resourceGroups/resource-group-name/providers/Microsoft.Network/privateDnsZones/privatelink.servicebus.windows.net</b><br/>Please confirm the Private DNS zone name is correct and refer to <a href='https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns'>Azure Private Endpoint DNS configuration</a>.<br/> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETRestrictedAccessForAzureMonitorResources": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "<b>[VNet Only]</b><br />Indicates if public access to Azure Monitor resources is restricted, for example, Application Insights or Log Analytics workspace. If set to true, Azure Monitor resources can only be accessed through the Azure Monitor Private Link Scope. If you don't add the Application Insights and Log Analytics workspace to the Azure Monitor Private Link Scope, you won't be able to ingest or query data. For more information on how to configure Private Link for Application Insights and Log Analytics workspace, see <a href='https://cloudone.trendmicro.com/docs/file-storage-security/azure-vnet-deployment/'>Restrict access to Application Insights and Log Analytics workspace'</a>. If VNet is not required, choose false."
            }
        },
        "VNETRestrictedAccessForApplicationInsights": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "<b>[To Be Deprecated][VNet Only]</b><br />The parameter will be replaced by <b>VNETRestrictedAccessForAzureMonitorResources</b> after 2024/10/31. Before it's fully deprecated, configuring either one to true means to restrict public network access to Application Insights and Azure Monitor resources.<br />Indicates whether to restrict public access to Application Insights. If set to true, Application Insights can only be accessed through Azure Monitor Private Link Scope. If you don't add the Application Insight to the Azure Monitor Private Link Scope, you won't be able to ingest or query data. For more information on how to configure Private Link for Application Insights, see <a href='https://cloudone.trendmicro.com/docs/file-storage-security/azure-vnet-deployment/'>Restrict access to Application Insights'</a>. If VNet is not required, choose false."
            }
        }
    },
    "variables": {
        "functionPackageLinkPrefix": "[concat(parameters('Version'), '/functions')]",
        "unifiedSAS": "[if(empty(parameters('SharedAccessSignature')), '', if(startsWith(parameters('SharedAccessSignature'), '?'), parameters('SharedAccessSignature'), concat('?', parameters('SharedAccessSignature'))))]",
        "scannerFunctionPackageLink": "[concat(parameters('StackPackageLocation'), '/', variables('functionPackageLinkPrefix'), '/azure-scanner.zip', variables('unifiedSAS'))]",

        "stackUID": "[uniqueString(resourceGroup().id)]",
        "functionContentShareName": "function-content-share",
        "scannerFunctionAppName": "[concat('tmsf0', variables('stackUID'))]",
        "scannerFunctionAppAPIVersion": "2022-03-01",
        "scannerServerFarmName": "[concat('tmssf0', variables('stackUID'))]",
        "scannerStorageAccountName": "[concat('tmsa0', toLower(variables('stackUID')))]",
        "scannerStorageAccountFileNICName": "[concat('tmsani0', variables('stackUID'))]",
        "scannerStorageAccountBlobNICName": "[concat('tmsani1', variables('stackUID'))]",
        "scannerStorageAccountTableNICName": "[concat('tmsani2', variables('stackUID'))]",
        "scannerStorageAccountFilePEName": "[concat('tmsape0', variables('stackUID'))]",
        "scannerStorageAccountBlobPEName": "[concat('tmsape1', variables('stackUID'))]",
        "scannerStorageAccountTablePEName": "[concat('tmsape2', variables('stackUID'))]",
        "scannerStorageAccountFileShareName": "[format('{0}/default/{1}', variables('scannerStorageAccountName'), variables('functionContentShareName'))]",
        "location": "[resourceGroup().location]",
        "scannerLogAnalyticsWorkspaceName": "[concat('tmlaws0', toLower(variables('stackUID')))]",
        "scannerApplicationInsightsName": "[concat('tmai0', toLower(variables('stackUID')))]",
        "scannerPatternRootFolder": "data",
        "scannerPatternPath": "[concat(variables('scannerPatternRootFolder'), '/patterns')]",
        "scannerQueueNamespaceName": "[concat('tmsbq0', toLower(variables('stackUID')))]",
        "scannerQueueName": "scanner_queue",
        "scannerBusQueueName": "[concat(variables('scannerQueueNamespaceName'), '/', variables('scannerQueueName'))]",
        "scannerQueueSASKeyName": "RootManageSharedAccessKey",
        "scannerQueueAuthRuleResourceId": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('scannerQueueNamespaceName'), variables('scannerQueueSASKeyName'))]",
        "scannerQueueAPIVersion": "2017-04-01",
        "scannerQueueNamespacePEName": "[concat('tmsbqpe0', toLower(variables('stackUID')))]",
        "scannerQueueNamespaceNICName": "[concat('tmsbqni0', toLower(variables('stackUID')))]",
        "scannerLicenseKeyVaultName": "[concat('tmsl0', variables('stackUID'))]",
        "scannerLicenseSecretName": "scanner-license",
        "scannerConfigKeyVaultName": "[concat('tmsc0', variables('stackUID'))]",
        "scannerConfigSecretName": "scanner-config",
        "scanResultTopicName": "scan-result-topic",
        "resourceManagementRoleName": "[guid(variables('stackUID'), 'resourceManagementRoleName')]",
        "resourceManagementRoleAssignmentUID": "[guid(variables('stackUID'), 'resourceManagementRoleAssignment', parameters('FileStorageSecurityServicePrincipalID'))]",
        "resourceManagementRoleDefinitionName": "[concat('FSS-ResourceManagementRole-', variables('resourceManagementRoleName'))]",
        "scannerQueueManagementRoleName": "[guid(variables('stackUID'), 'scannerQueueManagementRoleName')]",
        "scannerQueueManagementRoleAssignmentUID": "[guid(variables('stackUID'), 'scannerQueueManagementRoleAssignment', parameters('FileStorageSecurityServicePrincipalID'))]",
        "scannerQueueManagementRoleDefinitionName": "[concat('FSS-ScannerQueueManagementRole-', variables('scannerQueueManagementRoleName'))]",
        "scannerLicenseManagementRoleName": "[guid(variables('stackUID'), 'scannerLicenseManagementRoleName')]",
        "scannerLicenseManagementRoleAssignmentUID": "[guid(variables('stackUID'), 'scannerLicenseManagementRoleAssignment', parameters('FileStorageSecurityServicePrincipalID'))]",
        "scannerLicenseManagementRoleDefinitionName": "[concat('FSS-ScannerLicenseManagementRole-', variables('scannerLicenseManagementRoleName'))]",
        "scannerConfigManagementRoleName": "[guid(variables('stackUID'), 'scannerConfigManagementRoleName')]",
        "scannerConfigManagementRoleAssignmentUID": "[guid(variables('stackUID'), 'scannerConfigManagementRoleAssignment', parameters('FileStorageSecurityServicePrincipalID'))]",
        "scannerConfigManagementRoleDefinitionName": "[concat('FSS-ScannerConfigManagementRole-', variables('scannerConfigManagementRoleName'))]",
        "scannerUpdaterRoleName": "[guid(variables('stackUID'), 'scannerUpdaterRoleName', parameters('FileStorageSecurityServicePrincipalID'))]",
        "scannerUpdaterRoleAssignmentUID": "[guid(variables('stackUID'), 'scannerUpdaterRoleAssignment')]",
        "scannerUpdaterRoleDefinitionName": "[concat('FSS-ScannerUpdaterRole-', variables('scannerUpdaterRoleName'))]",
        "resourcesReaderRoleAssignmentUID": "[guid(resourceGroup().id, 'ResourcesReaderRoleAssignment')]",
        "resourcesReaderRoleID": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
        "scannerLicenseReaderRoleAssignmentUID": "[guid(resourceGroup().id, 'scannerLicenseReaderRoleAssignment')]",
        "scannerConfigReaderRoleAssignmentUID": "[guid(resourceGroup().id, 'scannerConfigReaderRoleAssignment')]",
        "keyVaultSecretsUserRoleID": "4633458b-17de-408a-b874-0445c86b69e6",
        "functionsWorkerProcessCount": "1",
        "fssAPIEndpoint": "[format('https://filestorage.{0}.cloudone.trendmicro.com/api/', parameters('CloudOneRegion'))]",
        "withVNet": "[not(empty(parameters('VNETResourceID')))]",
        "privateEndpointSubnetID": "[concat(parameters('VNETResourceID'), '/subnets/', parameters('VNETPrivateEndpointsSubnetName'))]",
        "serviceBusTier": "[if(variables('withVNet'), 'Premium', 'Basic')]",
        "storageAccountType": "[if(variables('withVNet'), 'StorageV2', 'Storage')]",
        "publicNetworkAccess": "[if(variables('withVNet'), 'Disabled', 'Enabled')]",
        "filePrivateZoneGroupName": "filePrivateDnsZoneGroup",
        "blobPrivateZoneGroupName": "blobPrivateDnsZoneGroup",
        "tablePrivateZoneGroupName": "tablePrivateDnsZoneGroup",
        "serviceBusPrivateZoneGroupName": "serviceBusPrivateDnsZoneGroup",
        "azureMonitorResourcesPublicAccess": "[if(and(variables('withVNet'), or(parameters('VNETRestrictedAccessForApplicationInsights'), parameters('VNETRestrictedAccessForAzureMonitorResources'))), 'Disabled', 'Enabled')]"
    },
    "resources": [
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('resourcesReaderRoleAssignmentUID')]",
            "dependsOn": [
                "[variables('scannerFunctionAppName')]"
            ],
            "scope": "[concat('Microsoft.Web/sites/', variables('scannerFunctionAppName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('resourcesReaderRoleID'))]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('scannerFunctionAppName')), variables('scannerFunctionAppAPIVersion'), 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces",
            "apiVersion": "2022-10-01-preview",
            "name": "[variables('scannerQueueNamespaceName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[variables('serviceBusTier')]",
                "tier": "[variables('serviceBusTier')]"
            },
            "properties": {
                "zoneRedundant": false,
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "[variables('publicNetworkAccess')]"
            },
            "resources": [
                {
                    "type": "Microsoft.ServiceBus/namespaces/queues",
                    "apiVersion": "2022-10-01-preview",
                    "name": "[variables('scannerBusQueueName')]",
                    "location": "[variables('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('scannerQueueNamespaceName'))]"
                    ],
                    "properties": {
                        "lockDuration": "PT3M",
                        "maxSizeInMegabytes": 1024,
                        "requiresDuplicateDetection": false,
                        "requiresSession": false,
                        "defaultMessageTimeToLive": "PT1H",
                        "deadLetteringOnMessageExpiration": true,
                        "enableBatchedOperations": false,
                        "maxDeliveryCount": 3,
                        "status": "Active",
                        "enablePartitioning": false,
                        "enableExpress": false
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-07-01",
            "name": "[variables('scannerQueueNamespacePEName')]",
            "location": "[resourceGroup().location]",
            "condition": "[variables('withVNet')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('scannerQueueNamespaceName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('scannerQueueNamespacePEName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.ServiceBus/namespaces', variables('scannerQueueNamespaceName'))]",
                            "groupIds": [
                                "namespace"
                            ]
                        }
                    }
                ],
                "customNetworkInterfaceName": "[variables('scannerQueueNamespaceNICName')]",
                "subnet": {
                    "id": "[variables('privateEndpointSubnetID')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('scannerQueueNamespacePEName'), '/', variables('serviceBusPrivateZoneGroupName'))]",
            "condition": "[and(not(empty(parameters('VNETServiceBusPrivateDNSZoneResourceID'))), variables('withVNet'))]",
            "dependsOn": [
                "[variables('scannerQueueNamespacePEName')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "[variables('serviceBusPrivateZoneGroupName')]",
                        "properties": {
                            "privateDnsZoneId": "[parameters('VNETServiceBusPrivateDNSZoneResourceID')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2021-12-01-preview",
            "name": "[variables('scannerLogAnalyticsWorkspaceName')]",
            "condition": "[empty(parameters('LogAnalyticsWorkspaceResourceID'))]",
            "location": "[variables('location')]",
            "properties": {
                "sku": {
                    "name": "pergb2018"
                },
                "retentionInDays": 90,
                "features": {
                    "enableLogAccessUsingOnlyResourcePermissions": true
                },
                "publicNetworkAccessForIngestion": "[variables('azureMonitorResourcesPublicAccess')]",
                "publicNetworkAccessForQuery": "[variables('azureMonitorResourcesPublicAccess')]"
            }
        },
        {
            "name": "[variables('scannerApplicationInsightsName')]",
            "type": "microsoft.insights/components",
            "kind": "web",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('scannerLogAnalyticsWorkspaceName'))]"
            ],
            "apiVersion": "2020-02-02",
            "properties": {
                "Application_Type": "web",
                "Flow_Type": "Bluefield",
                "Request_Source": "rest",
                "WorkspaceResourceId": "[if(empty(parameters('LogAnalyticsWorkspaceResourceID')), resourceId('Microsoft.OperationalInsights/workspaces/', variables('scannerLogAnalyticsWorkspaceName')), parameters('LogAnalyticsWorkspaceResourceID'))]",
                "publicNetworkAccessForIngestion": "[variables('azureMonitorResourcesPublicAccess')]",
                "publicNetworkAccessForQuery": "[variables('azureMonitorResourcesPublicAccess')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2022-09-01",
            "name": "[variables('scannerStorageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "[variables('storageAccountType')]",
            "properties": {
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": false,
                "publicNetworkAccess": "[variables('publicNetworkAccess')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2022-05-01",
            "name": "[variables('scannerStorageAccountFileShareName')]",
            "condition": "[variables('withVNet')]",
            "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-07-01",
            "name": "[variables('scannerStorageAccountFilePEName')]",
            "location": "[resourceGroup().location]",
            "condition": "[variables('withVNet')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('scannerStorageAccountFilePEName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]",
                            "groupIds": [
                                "file"
                            ]
                        }
                    }
                ],
                "customNetworkInterfaceName": "[variables('scannerStorageAccountFileNICName')]",
                "subnet": {
                    "id": "[variables('privateEndpointSubnetID')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('scannerStorageAccountFilePEName'), '/', variables('filePrivateZoneGroupName'))]",
            "condition": "[and(not(empty(parameters('VNETFilePrivateDNSZoneResourceID'))), variables('withVNet'))]",
            "dependsOn": [
                "[variables('scannerStorageAccountFilePEName')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "[variables('filePrivateZoneGroupName')]",
                        "properties": {
                            "privateDnsZoneId": "[parameters('VNETFilePrivateDNSZoneResourceID')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-07-01",
            "name": "[variables('scannerStorageAccountBlobPEName')]",
            "location": "[resourceGroup().location]",
            "condition": "[variables('withVNet')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('scannerStorageAccountBlobPEName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]",
                            "groupIds": [
                                "blob"
                            ]
                        }
                    }
                ],
                "customNetworkInterfaceName": "[variables('scannerStorageAccountBlobNICName')]",
                "subnet": {
                    "id": "[variables('privateEndpointSubnetID')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('scannerStorageAccountBlobPEName'), '/', variables('blobPrivateZoneGroupName'))]",
            "condition": "[and(not(empty(parameters('VNETBlobPrivateDNSZoneResourceID'))), variables('withVNet'))]",
            "dependsOn": [
                "[variables('scannerStorageAccountBlobPEName')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "[variables('blobPrivateZoneGroupName')]",
                        "properties": {
                            "privateDnsZoneId": "[parameters('VNETBlobPrivateDNSZoneResourceID')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-07-01",
            "name": "[variables('scannerStorageAccountTablePEName')]",
            "location": "[resourceGroup().location]",
            "condition": "[variables('withVNet')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('scannerStorageAccountTablePEName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]",
                            "groupIds": [
                                "table"
                            ]
                        }
                    }
                ],
                "customNetworkInterfaceName": "[variables('scannerStorageAccountTableNICName')]",
                "subnet": {
                    "id": "[variables('privateEndpointSubnetID')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('scannerStorageAccountTablePEName'), '/', variables('tablePrivateZoneGroupName'))]",
            "condition": "[and(not(empty(parameters('VNETTablePrivateDNSZoneResourceID'))), variables('withVNet'))]",
            "dependsOn": [
                "[variables('scannerStorageAccountTablePEName')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "[variables('tablePrivateZoneGroupName')]",
                        "properties": {
                            "privateDnsZoneId": "[parameters('VNETTablePrivateDNSZoneResourceID')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-12-01",
            "name": "[variables('scannerServerFarmName')]",
            "kind": "linux",
            "properties": {
                "reserved": true
            },
            "location": "[variables('location')]",
            "sku": {
                "name": "EP1",
                "tier": "ElasticPremium",
                "size": "EP1",
                "family": "EP"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "[variables('scannerFunctionAppAPIVersion')]",
            "name": "[variables('scannerFunctionAppName')]",
            "location": "[variables('location')]",
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('scannerServerFarmName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces/', variables('scannerQueueNamespaceName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(variables('scannerStorageAccountFileShareName'), '/')[0], split(variables('scannerStorageAccountFileShareName'), '/')[1], split(variables('scannerStorageAccountFileShareName'), '/')[2])]"
            ],
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(variables('scannerFunctionAppName'), '.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(variables('scannerFunctionAppName'), '.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('scannerServerFarmName'))]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "publicNetworkAccess": "[variables('publicNetworkAccess')]",
                "virtualNetworkSubnetId": "[if(variables('withVNet'), concat(parameters('VNETResourceID'), '/subnets/', parameters('VNETScannerSubnetName')), json('null'))]",
                "vnetRouteAllEnabled": "[variables('withVNet')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components', variables('scannerApplicationInsightsName')), '2020-02-02-preview').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('microsoft.insights/components', variables('scannerApplicationInsightsName')), '2020-02-02-preview').ConnectionString]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('scannerStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('scannerStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('scannerStorageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[if(variables('withVNet'), variables('functionContentShareName'), variables('scannerFunctionAppName'))]"
                        },
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "[variables('scannerFunctionPackageLink')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTOVERVNET",
                            "value": "[if(variables('withVNet'), '1', '0')]"
                        },
                        {
                            "name": "LD_LIBRARY_PATH",
                            "value": "/home/site/wwwroot:/home/site/wwwroot/lib"
                        },
                        {
                            "name": "PATTERN_PATH",
                            "value": "[concat('/home/', variables('scannerPatternPath'))]"
                        },
                        {
                            "name": "PATTERN_VERSION",
                            "value": ""
                        },
                        {
                            "name": "PATTERN_UPDATE_SCHEDULE",
                            "value": "00:01:00"
                        },
                        {
                            "name": "LICENSE",
                            "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('scannerLicenseKeyVaultName'), ';SecretName=', variables('scannerLicenseSecretName'), ')')]"
                        },
                        {
                            "name": "SCAN_CONFIG",
                            "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('scannerConfigKeyVaultName'), ';SecretName=', variables('scannerConfigSecretName'), ')')]"
                        },
                        {
                            "name": "BUS_QUEUE_CONNECTION_STR",
                            "value": "[listkeys(variables('scannerQueueAuthRuleResourceId'), variables('scannerQueueAPIVersion')).primaryConnectionString]"
                        },
                        {
                            "name": "SCANNER_QUEUE_NAME",
                            "value": "[variables('scannerQueueName')]"
                        },
                        {
                            "name": "SCAN_RESULT_TOPIC_NAME",
                            "value": "[variables('scanResultTopicName')]"
                        },
                        {
                            "name": "SUBSCRIPTION_ID",
                            "value": "[subscription().subscriptionId]"
                        },
                        {
                            "name": "SUBSCRIPTION_NAME",
                            "value": "[subscription().displayName]"
                        },
                        {
                            "name": "TENANT_ID",
                            "value": "[subscription().tenantId]"
                        },
                        {
                            "name": "CLOUD_ONE_REGION",
                            "value": "[parameters('CloudOneRegion')]"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
                            "value": "[variables('functionsWorkerProcessCount')]"
                        },
                        {
                            "name": "FSS_API_ENDPOINT",
                            "value": "[variables('fssAPIEndpoint')]"
                        },
                        {
                            "name": "RESOURCE_GROUP_NAME",
                            "value": "[resourceGroup().name]"
                        }
                    ],
                    "use32BitWorkerProcess": false,
                    "linuxFxVersion": "PYTHON|3.8",
                    "minTlsVersion": "1.2",
                    "functionsRuntimeScaleMonitoringEnabled": "[variables('withVNet')]"
                },
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": false,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 1536,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true,
                "redundancyMode": "None"
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2019-05-01",
            "name": "scannerWarmUpLogicApp",
            "location": "[variables('location')]",
            "condition": "[not(variables('withVNet'))]",
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 10
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "HTTP": {
                            "type": "Http",
                            "inputs": {
                                "method": "GET",
                                "uri": "[concat('https://', reference(variables('scannerFunctionAppName')).defaultHostName)]"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('scannerLicenseKeyVaultName')]",
            "location": "[variables('location')]",
            "properties": {
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "enablePurgeProtection": true,
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('scannerConfigKeyVaultName')]",
            "location": "[variables('location')]",
            "properties": {
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "enablePurgeProtection": true,
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('scannerLicenseReaderRoleAssignmentUID')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('scannerLicenseKeyVaultName'))]"
            ],
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('scannerLicenseKeyVaultName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsUserRoleID'))]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('scannerFunctionAppName')), variables('scannerFunctionAppAPIVersion'), 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('scannerConfigReaderRoleAssignmentUID')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('scannerConfigKeyVaultName'))]"
            ],
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('scannerConfigKeyVaultName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsUserRoleID'))]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('scannerFunctionAppName')), variables('scannerFunctionAppAPIVersion'), 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleDefinitions",
            "apiVersion": "2022-04-01",
            "name": "[variables('scannerUpdaterRoleName')]",
            "properties": {
                "roleName": "[variables('scannerUpdaterRoleDefinitionName')]",
                "description": "FSS pattern updater role",
                "type": "customRole",
                "isCustom": true,
                "permissions": [
                    {
                        "actions": [
                            "Microsoft.Web/sites/Read",
                            "Microsoft.Web/sites/config/list/action",
                            "Microsoft.Web/sites/config/Read",
                            "Microsoft.Web/sites/config/Write",
                            "Microsoft.Web/sites/restart/Action"
                        ]
                    }
                ],
                "assignableScopes": [
                    "[resourceGroup().id]"
                ]
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('scannerUpdaterRoleAssignmentUID')]",
            "dependsOn": [
                "[variables('scannerUpdaterRoleName')]",
                "[variables('scannerFunctionAppName')]"
            ],
            "scope": "[resourceId('Microsoft.Web/sites', variables('scannerFunctionAppName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('scannerUpdaterRoleName'))]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('scannerFunctionAppName')), variables('scannerFunctionAppAPIVersion'), 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleDefinitions",
            "apiVersion": "2022-04-01",
            "name": "[variables('resourceManagementRoleName')]",
            "properties": {
                "roleName": "[variables('resourceManagementRoleDefinitionName')]",
                "description": "FSS resource management role",
                "type": "customRole",
                "isCustom": true,
                "permissions": [
                    {
                        "actions": [
                            "Microsoft.Resources/subscriptions/resourceGroups/read",
                            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
                            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
                            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
                            "Microsoft.Resources/subscriptions/resourcegroups/resources/read",

                            "Microsoft.Web/sites/Read",
                            "Microsoft.Web/sites/config/list/action",
                            "Microsoft.Web/sites/config/Read",
                            "Microsoft.Web/sites/config/Write",
                            "Microsoft.Web/sites/functions/read",
                            "Microsoft.Web/sites/functions/write",
                            "Microsoft.Web/sites/host/sync/action",
                            "Microsoft.Web/sites/host/listsyncstatus/action",
                            "Microsoft.Web/sites/metrics/read",
                            "Microsoft.Web/sites/restart/Action",
                            "Microsoft.Web/sites/syncfunctiontriggers/action",
                            "Microsoft.Web/sites/usages/read",

                            "Microsoft.Authorization/roleDefinitions/read",
                            "Microsoft.Authorization/roleAssignments/read",

                            "Microsoft.ManagedIdentity/userAssignedIdentities/read",

                            "Microsoft.Resources/deployments/read",
                            "Microsoft.Resources/deployments/whatIf/action",
                            "Microsoft.Resources/deployments/exportTemplate/action",
                            "Microsoft.Resources/deployments/operations/read",
                            "Microsoft.Resources/deployments/operationstatuses/read",

                            "Microsoft.Resources/deploymentScripts/read",
                            "Microsoft.Resources/deploymentScripts/logs/read",

                            "Microsoft.Storage/storageAccounts/read",

                            "Microsoft.Insights/Components/Read",
                            "Microsoft.Insights/Components/Query/Read",
                            "Microsoft.Insights/Logs/Read",

                            "Microsoft.ServiceBus/namespaces/read",
                            "Microsoft.ServiceBus/namespaces/queues/read"
                        ]
                    }
                ],
                "assignableScopes": [
                    "[resourceGroup().id]"
                ]
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('resourceManagementRoleAssignmentUID')]",
            "condition": "[not(empty(parameters('FileStorageSecurityServicePrincipalID')))]",
            "dependsOn": ["[variables('resourceManagementRoleName')]"],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('resourceManagementRoleName'))]",
                "principalId": "[parameters('FileStorageSecurityServicePrincipalID')]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleDefinitions",
            "apiVersion": "2022-04-01",
            "name": "[variables('scannerQueueManagementRoleName')]",
            "properties": {
                "roleName": "[variables('scannerQueueManagementRoleDefinitionName')]",
                "description": "FSS scanner queue management role",
                "type": "customRole",
                "isCustom": true,
                "permissions": [
                    {
                        "actions": [
                            "Microsoft.Authorization/roleAssignments/write",
                            "Microsoft.Authorization/roleAssignments/delete"
                        ]
                    }
                ],
                "assignableScopes": [
                    "[resourceGroup().id]"
                ]
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('scannerQueueManagementRoleAssignmentUID')]",
            "condition": "[not(empty(parameters('FileStorageSecurityServicePrincipalID')))]",
            "dependsOn": [
                "[variables('scannerQueueManagementRoleName')]",
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', variables('scannerQueueNamespaceName'), variables('scannerQueueName'))]"
            ],
            "scope": "[concat('Microsoft.ServiceBus/namespaces/', variables('scannerQueueNamespaceName'), '/queues/', variables('scannerQueueName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('scannerQueueManagementRoleName'))]",
                "principalId": "[parameters('FileStorageSecurityServicePrincipalID')]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleDefinitions",
            "apiVersion": "2022-04-01",
            "name": "[variables('scannerLicenseManagementRoleName')]",
            "properties": {
                "roleName": "[variables('scannerLicenseManagementRoleDefinitionName')]",
                "description": "FSS scanner license key vault management role",
                "type": "customRole",
                "isCustom": true,
                "permissions": [
                    {
                        "dataActions": [
                            "Microsoft.KeyVault/vaults/secrets/setSecret/action",
                            "Microsoft.KeyVault/vaults/secrets/getSecret/action"
                        ]
                    }
                ],
                "assignableScopes": [
                    "[resourceGroup().id]"
                ]
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('scannerLicenseManagementRoleAssignmentUID')]",
            "condition": "[not(empty(parameters('FileStorageSecurityServicePrincipalID')))]",
            "dependsOn": [
                "[variables('scannerLicenseManagementRoleName')]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('scannerLicenseKeyVaultName'))]"
            ],
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('scannerLicenseKeyVaultName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('scannerLicenseManagementRoleName'))]",
                "principalId": "[parameters('FileStorageSecurityServicePrincipalID')]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleDefinitions",
            "apiVersion": "2022-04-01",
            "name": "[variables('scannerConfigManagementRoleName')]",
            "properties": {
                "roleName": "[variables('scannerConfigManagementRoleDefinitionName')]",
                "description": "FSS scanner configuration key vault management role",
                "type": "customRole",
                "isCustom": true,
                "permissions": [
                    {
                        "dataActions": [
                            "Microsoft.KeyVault/vaults/secrets/getSecret/action",
                            "Microsoft.KeyVault/vaults/secrets/setSecret/action"
                        ]
                    }
                ],
                "assignableScopes": [
                    "[resourceGroup().id]"
                ]
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('scannerConfigManagementRoleAssignmentUID')]",
            "condition": "[not(empty(parameters('FileStorageSecurityServicePrincipalID')))]",
            "dependsOn": [
                "[variables('scannerConfigManagementRoleName')]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('scannerConfigKeyVaultName'))]"
            ],
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('scannerConfigKeyVaultName'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('scannerConfigManagementRoleName'))]",
                "principalId": "[parameters('FileStorageSecurityServicePrincipalID')]",
                "principalType": "ServicePrincipal"
            }
        }
    ],
    "outputs": {
        "TenantID": {
            "type": "string",
            "value": "[subscription().tenantId]"
        },
        "ScannerStackResourceGroupID": {
            "type": "string",
            "value": "[resourceGroup().id]"
        },
        "ScannerQueueNamespace": {
            "type": "string",
            "value": "[variables('scannerQueueNamespaceName')]"
        },
        "ScannerIdentityPrincipalID": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Web/sites', variables('scannerFunctionAppName')), variables('scannerFunctionAppAPIVersion'), 'full').identity.principalId]"
        },
        "CloudOneRegion": {
            "type": "string",
            "value": "[parameters('CloudOneRegion')]"
        },
        "ScannerResourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Web/sites', variables('scannerFunctionAppName'))]"
        },
        "ScannerQueueResourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.ServiceBus/namespaces/queues', variables('scannerQueueNamespaceName'), variables('scannerQueueName'))]"
        },
        "ScannerLicenseKeyVaultURI": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('scannerLicenseKeyVaultName'))).vaultUri]"
        },
        "ScannerConfigKeyVaultURI": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('scannerConfigKeyVaultName'))).vaultUri]"
        },
        "WithVNet": {
            "type": "bool",
            "value": "[variables('withVNet')]"
        },
        "ScannerStorageAccountName": {
            "type": "string",
            "value": "[variables('scannerStorageAccountName')]"
        },
        "ScannerApplicationInsightResourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Insights/components', variables('scannerApplicationInsightsName'))]"
        }
    }
}
